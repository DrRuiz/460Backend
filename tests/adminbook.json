{
	"info": {
		"_postman_id": "5d1a8c78-7bb0-4198-8192-8ee1192f07ca",
		"name": "AdminBook",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34779746"
	},
	"item": [
		{
			"name": "AddBook",
			"item": [
				{
					"name": "AddSuccess",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test(\"Body has entry field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"entry\");\r",
									"})\r",
									"\r",
									"pm.test(\"Success should relay this information\", () => {\r",
									"    pm.expect(response.entry.isbn13).to.eql(\"9798631094345\");\r",
									"    pm.expect(response.entry.authors).to.eql(\"Socrates Co.\");\r",
									"    pm.expect(response.entry.publication).to.eql(2020);\r",
									"    pm.expect(response.entry.original_title).to.eql(\"One Million Digits Of Pi: Decimal Places from 1 to 1,000,000\");\r",
									"    pm.expect(response.entry.title).to.eql(\"One Million Digits of Pi\");\r",
									"    pm.expect(response.entry.ratings.average).to.eql(4.6);\r",
									"    pm.expect(response.entry.ratings.count).to.eql(102);\r",
									"    pm.expect(response.entry.ratings.rating_1).to.eql(3);\r",
									"    pm.expect(response.entry.ratings.rating_2).to.eql(2);\r",
									"    pm.expect(response.entry.ratings.rating_3).to.eql(4);\r",
									"    pm.expect(response.entry.ratings.rating_4).to.eql(9);\r",
									"    pm.expect(response.entry.ratings.rating_5).to.eql(84);\r",
									"    pm.expect(response.entry.icons.large).to.eql(\"https://m.media-amazon.com/images/I/719VMyobJDL._SY466_.jpg\");\r",
									"    pm.expect(response.entry.icons.small).to.eql(\"https://m.media-amazon.com/images/I/719VMyobJDL._SY466_.jpg\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoxLCJpZCI6MSwiaWF0IjoxNzE1NDg5NzQ1LCJleHAiOjE3MTY2OTkzNDV9.O5AURDpINpCx1XdGf9R6EH77ix5J56EgVKlNJeqDOjg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"isbn13\": 9798631094345,\r\n    \"authors\": \"Socrates Co.\",\r\n    \"publication\": 2020,\r\n    \"original_title\": \"One Million Digits Of Pi: Decimal Places from 1 to 1,000,000\",\r\n    \"title\": \"One Million Digits of Pi\",\r\n    \"average\": 4.6,\r\n    \"count\": 102,\r\n    \"rating_1\": 3,\r\n    \"rating_2\": 2,\r\n    \"rating_3\": 4,\r\n    \"rating_4\": 9,\r\n    \"rating_5\": 84,\r\n    \"large\": \"https://m.media-amazon.com/images/I/719VMyobJDL._SY466_.jpg\",\r\n    \"small\": \"https://m.media-amazon.com/images/I/719VMyobJDL._SY466_.jpg\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{admin_url}}/addBook",
							"host": [
								"{{admin_url}}"
							],
							"path": [
								"addBook"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddEmptySuccess",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test(\"Body has entry field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"entry\");\r",
									"})\r",
									"\r",
									"pm.test(\"Success should relay this information\", () => {\r",
									"    pm.expect(response.entry.isbn13).to.eql(\"0\");\r",
									"    pm.expect(response.entry.authors).to.eql(\"Mimiga\");\r",
									"    pm.expect(response.entry.publication).to.eql(2021);\r",
									"    pm.expect(response.entry.original_title).to.eql(\"\");\r",
									"    pm.expect(response.entry.title).to.eql(\"Paradise Apart\");\r",
									"    pm.expect(response.entry.ratings.average).to.eql(0);\r",
									"    pm.expect(response.entry.ratings.count).to.eql(0);\r",
									"    pm.expect(response.entry.ratings.rating_1).to.eql(0);\r",
									"    pm.expect(response.entry.ratings.rating_2).to.eql(0);\r",
									"    pm.expect(response.entry.ratings.rating_3).to.eql(0);\r",
									"    pm.expect(response.entry.ratings.rating_4).to.eql(0);\r",
									"    pm.expect(response.entry.ratings.rating_5).to.eql(0);\r",
									"    pm.expect(response.entry.icons.large).to.eql(\"\");\r",
									"    pm.expect(response.entry.icons.small).to.eql(\"\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"isbn13\": 0,\r\n    \"authors\": \"Mimiga\",\r\n    \"publication\": 2021,\r\n    \"title\": \"Paradise Apart\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{admin_url}}/addBook",
							"host": [
								"{{admin_url}}"
							],
							"path": [
								"addBook"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddISBNErr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Invalid ISBN\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Invalid ISBN, use a nonnegative number.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoxLCJpZCI6MSwiaWF0IjoxNzE1NDg5NzQ1LCJleHAiOjE3MTY2OTkzNDV9.O5AURDpINpCx1XdGf9R6EH77ix5J56EgVKlNJeqDOjg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"isbn13\": -1,\r\n    \"authors\": \"Mimiga\",\r\n    \"publication\": 2021,\r\n    \"title\": \"Paradise Apart\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{admin_url}}/addBook",
							"host": [
								"{{admin_url}}"
							],
							"path": [
								"addBook"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddYearErr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Invalid year\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Invalid year, use a number.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoxLCJpZCI6MSwiaWF0IjoxNzE1NDg5NzQ1LCJleHAiOjE3MTY2OTkzNDV9.O5AURDpINpCx1XdGf9R6EH77ix5J56EgVKlNJeqDOjg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"isbn13\": 0,\r\n    \"authors\": \"Mimiga\",\r\n    \"publication\": \"Twenty Twenty-One\",\r\n    \"title\": \"Paradise Apart\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{admin_url}}/addBook",
							"host": [
								"{{admin_url}}"
							],
							"path": [
								"addBook"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddAvgErr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Invalid average rating\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Invalid average rating, use a decimal number 0-5.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoxLCJpZCI6MSwiaWF0IjoxNzE1NDg5NzQ1LCJleHAiOjE3MTY2OTkzNDV9.O5AURDpINpCx1XdGf9R6EH77ix5J56EgVKlNJeqDOjg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"isbn13\": 0,\r\n    \"authors\": \"Mimiga\",\r\n    \"publication\": 2021,\r\n    \"title\": \"Paradise Apart\",\r\n    \"average\": 5.1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{admin_url}}/addBook",
							"host": [
								"{{admin_url}}"
							],
							"path": [
								"addBook"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddCountErr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Invalid total rating count\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Invalid total rating count, use a nonnegative number.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoxLCJpZCI6MSwiaWF0IjoxNzE1NDg5NzQ1LCJleHAiOjE3MTY2OTkzNDV9.O5AURDpINpCx1XdGf9R6EH77ix5J56EgVKlNJeqDOjg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"isbn13\": 0,\r\n    \"authors\": \"Mimiga\",\r\n    \"publication\": 2021,\r\n    \"title\": \"Paradise Apart\",\r\n    \"count\": -1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{admin_url}}/addBook",
							"host": [
								"{{admin_url}}"
							],
							"path": [
								"addBook"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddStarErr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Invalid star ratings\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Invalid star ratings, use nonnegative numbers.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoxLCJpZCI6MSwiaWF0IjoxNzE1NDg5NzQ1LCJleHAiOjE3MTY2OTkzNDV9.O5AURDpINpCx1XdGf9R6EH77ix5J56EgVKlNJeqDOjg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"isbn13\": 0,\r\n    \"authors\": \"Mimiga\",\r\n    \"publication\": 2021,\r\n    \"title\": \"Paradise Apart\",\r\n    \"rating_1\": -1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{admin_url}}/addBook",
							"host": [
								"{{admin_url}}"
							],
							"path": [
								"addBook"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddMissInfoErr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Missing information\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Missing required information, see documentation.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoxLCJpZCI6MSwiaWF0IjoxNzE1NDg5NzQ1LCJleHAiOjE3MTY2OTkzNDV9.O5AURDpINpCx1XdGf9R6EH77ix5J56EgVKlNJeqDOjg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"authors\": \"Mimiga\",\r\n    \"publication\": 2021,\r\n    \"title\": \"Paradise Apart\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{admin_url}}/addBook",
							"host": [
								"{{admin_url}}"
							],
							"path": [
								"addBook"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddDuplicateErr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Book already exists\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Book already exists in database.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoxLCJpZCI6MSwiaWF0IjoxNzE1NDg5NzQ1LCJleHAiOjE3MTY2OTkzNDV9.O5AURDpINpCx1XdGf9R6EH77ix5J56EgVKlNJeqDOjg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"isbn13\": 9780062024040,\r\n    \"authors\": \"Veronica Roth\",\r\n    \"publication\": 2011,\r\n    \"title\": \"Divergent (Divergent, #1)\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{admin_url}}/addBook",
							"host": [
								"{{admin_url}}"
							],
							"path": [
								"addBook"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddNoToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Auth token is not supplied\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"isbn13\": 0,\r\n    \"authors\": \"Mimiga\",\r\n    \"publication\": 2021,\r\n    \"title\": \"Paradise Apart\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{admin_url}}/addBook",
							"host": [
								"{{admin_url}}"
							],
							"path": [
								"addBook"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddBadToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 403\", () => {\r",
									"    pm.response.to.have.status(403);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Forbidden\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Token is not valid\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "THISISABADTOKEN!!!"
							}
						],
						"url": {
							"raw": "{{admin_url}}/addBook",
							"host": [
								"{{admin_url}}"
							],
							"path": [
								"addBook"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddUnauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 403\", () => {\r",
									"    pm.response.to.have.status(403);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Invalid Privilege\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"User does not have privilege to access this route.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoyLCJpZCI6MSwiaWF0IjoxNzE1NDkyODkwLCJleHAiOjE3MTY3MDI0OTB9.0ZtV517ZCpJUzizGI_TC03HjU7Z7HOpteRqQaWVq8_g"
							}
						],
						"url": {
							"raw": "{{admin_url}}/addBook",
							"host": [
								"{{admin_url}}"
							],
							"path": [
								"addBook"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "RemoveBooksByISBN",
			"item": [
				{
					"name": "RemoveBooksByISBNSuccess",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Body has entries field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"entries\");\r",
									"})\r",
									"\r",
									"pm.test(\"Correct book should have this isbn\", () => {\r",
									"    pm.expect(response.entries[0].isbn13).to.eql(\"9780374404150\");\r",
									"})\r",
									"\r",
									"pm.test(\"Correct book should have this isbn\", () => {\r",
									"    pm.expect(response.entries[0].authors).to.eql(\"Kristin Hannah\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoxLCJpZCI6MSwiaWF0IjoxNzE1NDg5NzQ1LCJleHAiOjE3MTY2OTkzNDV9.O5AURDpINpCx1XdGf9R6EH77ix5J56EgVKlNJeqDOjg"
							}
						],
						"url": {
							"raw": "localhost:4000/adminBook/isbn?isbn=9780374404150",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"adminBook",
								"isbn"
							],
							"query": [
								{
									"key": "isbn",
									"value": "9780374404150"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "RemoveByISBNMissingInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Missing information\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Missing data, refer to documentation.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoxLCJpZCI6MSwiaWF0IjoxNzE1NDg5NzQ1LCJleHAiOjE3MTY2OTkzNDV9.O5AURDpINpCx1XdGf9R6EH77ix5J56EgVKlNJeqDOjg"
							}
						],
						"url": {
							"raw": "localhost:4000/adminBook/isbn?isbn=",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"adminBook",
								"isbn"
							],
							"query": [
								{
									"key": "isbn",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "RemoveByISBNNoneFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"ISBN Number not found in database\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"ISBN Number not found in database\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoxLCJpZCI6MSwiaWF0IjoxNzE1NDg5NzQ1LCJleHAiOjE3MTY2OTkzNDV9.O5AURDpINpCx1XdGf9R6EH77ix5J56EgVKlNJeqDOjg"
							}
						],
						"url": {
							"raw": "localhost:4000/adminBook/isbn?isbn=88888888888",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"adminBook",
								"isbn"
							],
							"query": [
								{
									"key": "isbn",
									"value": "88888888888"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "RemoveByISBNUnauthorized Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 403\", () => {\r",
									"    pm.response.to.have.status(403);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Invalid Privilege\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"User does not have privilege to access this route.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoyLCJpZCI6MiwiaWF0IjoxNzE1NjQ3Mzc4LCJleHAiOjE3MTY4NTY5Nzh9.HHmF_-0D5qfX7WNWeC4v0vF-Zl39N5xg4giPYxlBQps"
							}
						],
						"url": {
							"raw": "localhost:4000/adminBook/isbn?isbn=9780374404150",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"adminBook",
								"isbn"
							],
							"query": [
								{
									"key": "isbn",
									"value": "9780374404150"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "admin_url",
			"value": "{{base_url}}/adminBook",
			"type": "string"
		}
	]
}